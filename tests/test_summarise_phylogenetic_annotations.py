import pytest
import logging
import os
import pandas
import logging
import src.summarise_phylogenetic_annotations as spa


#################################################
#### Fixtures
#################################################

@pytest.fixture
def project_dir():
    " Return root directory of project "
    script_fp = os.path.dirname(__file__)
    project_fp = '/'.join(script_fp.split('/')[:-2])
    return project_fp

@pytest.fixture
def output_folder(project_dir):
    " Return output folder"
    pb_fn = os.path.join(str(project_dir), 'test_out')
    return pb_fn

@pytest.fixture
def summary_folder(project_dir):
    ' Return summary output folder generated by matUtils '
    summary_fn = os.path.join(str(project_dir), 'test_data/matutils.summary_stats')
    return summary_fn

@pytest.fixture
def perfect_meta_file(project_dir):
    " Return tsv file with sample name and clade, no header."
    meta_fn = os.path.join(project_dir, 'test_data/20230723_test_genotypes.perfect.csv')
    return meta_fn

@pytest.fixture
def summary_table_with_group_column_only(project_dir):
    " Return tsv file with sample name and clade, no header."
    summary_df = os.path.join(project_dir, 'test_data/summary_table_groups_column_only.csv')
    return summary_df

@pytest.fixture
def assigned_clades(project_dir):
    ' Return summary output folder generated by matUtils '
    assigned_clades_file_path = os.path.join(str(project_dir), 'test_data/20230723_test_genotypes.perfect.csv')
    return assigned_clades_file_path

@pytest.fixture
def summary_df_with_clades(project_dir):
    ' Summary table with annotated clades '
    assigned_summary_table_file_path = os.path.join(str(project_dir), 'test_data/summary_table_with_clades.csv')
    return assigned_summary_table_file_path

#################################################
#### Unit Tests
#################################################

def test_import_original_clade_assignments(perfect_meta_file):
    ' test parsing of metadata file ' 
    orig_clade_df = spa.import_original_clade_assignments(perfect_meta_file)
    assert orig_clade_df.shape[1] == int(2) # check there are two columns to the dataframe
    assert list(orig_clade_df.columns) == ['original_clade','sample_id'] # check headers have been assigned appropriately


def test_import_matutils_summary_data(summary_folder):
    ' Import the datasets generated by matUtiles parsing of the ProtoBuf tree file  '
    spa.import_matutils_summary_data(summary_folder)

def test_parsimonious_placements_review(summary_folder):
    ' Test if summary table is generated parisomony scores '
    sample_clades_df, parsimonious_placements_df, clades_summary_df = spa.import_matutils_summary_data(summary_folder)
    pp_iqr_df, pp_iqr_values = spa.parsimonious_placements_review(parsimonious_placements_df)

    assert pp_iqr_df.iloc[0]['Sample_counts'] == int(250) # PP = 1
    assert pp_iqr_df.iloc[1]['Sample_counts'] == int(13) # PP > 1
    assert pp_iqr_df.iloc[2]['Sample_counts'] == int(2) # Min. Value
    assert pp_iqr_df.iloc[3]['Sample_counts'] == int(2.0) # Median Value
    assert pp_iqr_df.iloc[4]['Sample_counts'] == int(3) # Max Value
    assert pp_iqr_df.iloc[5]['Sample_counts'] == int(12) # <= 2.0
    assert pp_iqr_df.iloc[6]['Sample_counts'] == str('NA') # 2.0 > - <-= 2.0
    assert pp_iqr_df.iloc[7]['Sample_counts'] == int(1) # > 2.0

def test_parsimonious_placements_review(summary_folder):
    ' test if summary table is generated for neighbourhood size scores '
    sample_clades_df, parsimonious_placements_df, clades_summary_df = spa.import_matutils_summary_data(summary_folder)
    ns_iqr_df, ns_iqr_values = spa.neighbourhood_size_review(parsimonious_placements_df)    


    assert ns_iqr_df.iloc[0]['Sample_counts'] == int(252) # PP = 1
    assert ns_iqr_df.iloc[1]['Sample_counts'] == int(11) # PP > 1
    assert ns_iqr_df.iloc[2]['Sample_counts'] == int(4) # Min. Value
    assert ns_iqr_df.iloc[3]['Sample_counts'] == int(17.0) # Median Value
    assert ns_iqr_df.iloc[4]['Sample_counts'] == int(49) # Max Value
    assert ns_iqr_df.iloc[5]['Sample_counts'] == int(3) # <= 2.0
    assert ns_iqr_df.iloc[6]['Sample_counts'] == int(3) # 2.0 > - <-= 2.0
    assert ns_iqr_df.iloc[7]['Sample_counts'] == int(2) # > 2.0


def test_grouping_samples_phylo_assignment_scores(summary_folder):
    ' test if samples are annotated appropriately with quality groups '
    sample_clades_df, parsimonious_placements_df, clades_summary_df = spa.import_matutils_summary_data(summary_folder)
    pp_iqr_df, pp_iqr_values = spa.parsimonious_placements_review(parsimonious_placements_df)
    ns_iqr_df, ns_iqr_values = spa.neighbourhood_size_review(parsimonious_placements_df)
    
    summary_df = spa.grouping_samples_phylo_assignment_scores(parsimonious_placements_df, pp_iqr_values, ns_iqr_values)
    
    # Should not include cells with a value of '0', which would indicate a group not captured in the logic.
    for value in summary_df['quality_group']:
        assert value != int(0)
        
def test_add_inferred_sample_clades(summary_folder, summary_table_with_group_column_only, assigned_clades):
    ' test that columns are added to summary df'
    sample_clades_df, parsimonious_placements_df, clades_summary_df = spa.import_matutils_summary_data(summary_folder)
    summary_df = pandas.read_csv(summary_table_with_group_column_only)
    assigned_clades_df = spa.import_original_clade_assignments(assigned_clades)
    summary_df_merge = spa.add_inferred_sample_clades(summary_df, sample_clades_df, assigned_clades_df)

    # are any samples ids not in the final merged dataframe?
    # Inferred Clades
    sample_clades_df = sample_clades_df.dropna(subset=['sample_id']) # from NaN value from dataframe:
    sample_clades_df['exists'] = sample_clades_df['sample_id'].isin(summary_df_merge['sample_id'])
    assert False not in sample_clades_df['exists']
    # Assigned Clades 
    assigned_clades_df = assigned_clades_df.dropna(subset=['sample_id']) # from NaN value from dataframe:
    assigned_clades_df['exists'] = assigned_clades_df['sample_id'].isin(summary_df_merge['sample_id'])
    assert False not in assigned_clades_df['exists']


def test_summarise_clade_assignments(summary_df_with_clades, output_folder):
    ' Test summary of clade assignments is added '
    summary_df_merge = pandas.read_csv(summary_df_with_clades)
    summary_df_merge_annotated = spa.summarise_clade_assignments(summary_df_merge)

    # Write to file
    output_filename = os.path.join(output_folder, str('annotated_summary_stats.csv'))
    spa.write_to_csv(summary_df_merge_annotated, output_filename)
    assert output_filename